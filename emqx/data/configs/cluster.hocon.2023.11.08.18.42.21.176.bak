authorization {
  cache {
    enable = true
    max_size = 32
    ttl = 1m
  }
  deny_action = ignore
  no_match = allow
  sources = [
    {
      enable = true
      path = "${EMQX_ETC_DIR}/acl.conf"
      type = file
    }
  ]
}
bridges {
  webhook {
    Init {
      connect_timeout = 15s
      enable = true
      enable_pipelining = 100
      headers {content-type = "application/json"}
      max_retries = 2
      method = post
      pool_size = 8
      pool_type = hash
      resource_opts {
        health_check_interval = 15s
        inflight_window = 100
        max_buffer_bytes = 1GB
        query_mode = async
        request_ttl = 45s
        start_after_created = true
        start_timeout = 5s
        worker_pool_size = 4
      }
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = 5s
        log_level = notice
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_peer
        versions = [tlsv1.3, tlsv1.2]
      }
      url = "http://localhost:9000/emqx/ConnectStatus"
    }
    dataIncoming {
      connect_timeout = 15s
      enable_pipelining = 100
      headers {content-type = "application/json"}
      method = post
      pool_size = 8
      pool_type = hash
      resource_opts {
        health_check_interval = 15s
        inflight_window = 100
        max_buffer_bytes = 1GB
        query_mode = async
        request_ttl = 45s
        start_timeout = 5s
        worker_pool_size = 4
      }
      ssl {enable = false, verify = verify_peer}
      url = "http://localhost:9000/emqx/dataIncoming"
    }
  }
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = 10s
  rules {
    Init {
      actions = ["webhook:Init"]
      description = ""
      enable = true
      metadata {created_at = 1699440428202}
      sql = "SELECT\n  clientid as clientid,\n  payload.location as location,\n  payload.code as code,\n  payload.capacity as capacity,\n  payload.installed_date as installed_date\nFROM\n  \"Init/#\""
    }
    connectStatus {
      actions = ["webhook:Init"]
      description = ""
      enable = true
      metadata {created_at = 1699441145642}
      sql = "SELECT\n  clientid,\n  event as status\nFROM\n  \"$events/client_connected\",\n  \"$events/client_disconnected\""
    }
    dataIncoming {
      actions = ["webhook:dataIncoming"]
      description = ""
      enable = true
      metadata {created_at = 1699438869814}
      sql = "SELECT\n  *\nFROM\n  \"dataIncoming/#\""
    }
  }
}
sysmon {
  os {
    cpu_check_interval = 60s
    cpu_high_watermark = 80%
    cpu_low_watermark = 60%
    procmem_high_watermark = 5%
    sysmem_high_watermark = 70%
  }
  vm {
    busy_dist_port = true
    busy_port = true
    large_heap = 32MB
    long_gc = disabled
    long_schedule = 240ms
    process_check_interval = 30s
    process_high_watermark = 80%
    process_low_watermark = 60%
  }
}
